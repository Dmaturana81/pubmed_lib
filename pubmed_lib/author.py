# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_author.ipynb.

# %% auto 0
__all__ = ['Autor']

# %% ../nbs/02_author.ipynb 3
from Bio import Entrez
import sys
# from tinydb import TinyDB, Query, where
import pandas as pd
import xlsxwriter
from datetime import datetime, timedelta, date
from collections import defaultdict, Counter
import  pickle
from fastcore.all import *
from dotenv import load_dotenv


# %% ../nbs/02_author.ipynb 4
class Autor:
    def __init__(self, data):
        '''
        (dict) -> autor

        receive a dictionary with information about autor. keys and types:
        Fname (str)
        Lname (str)
        name (str)
        emails (list)
        affiliations (str)
        identifier (list)
        countries (list)
        updated (datetime)
        n_papers (int)
        state (str)

        '''
        self.Fname = data['Fname'].lower()
        self.Lname = data['Lname'].lower()
        self.name = data['name'].lower()
        self.email = data['emails']
        self.affiliations = data['affiliations']
        self.id = data['identifier']
        self.country = data['countries']
        self.state = data['state']
        self.db_name = './DBs/autors.json'
        if 'updated' in data.keys():
            self.updated = data['updated']
        else:
            self.updated = date.today().strftime('%d-%m-%Y')
        #add total number of papers from pubmed search.
        if 'n_papers' not in data.keys():
            self.n_papers = 0
        else:
            self.n_papers = data['n_papers']

    def add_db(self):
        try:
            if self.check_db():
                self.update_db()
            else:
                print('add to database')
                db = TinyDB(self.db_name)
                #updated = date.today()
                #self.updated = updated.strftime('%d-%m-%Y')
                db.insert(self.to_dict())
                db.close()
        except:
            print('Error adding autor to the database')
            return False

    def search(self):
        db = TinyDB(self.db_name)#, storage=serialization)
        query = Query()
        result = db.search((query.Lname.matches(self.name)) | (query.Fname.matches(self.name)) | (query.name.matches(self.name)))
        if len(result) > 0:
            db.close()
            return result
        else:
            db.close()
            return False

    def check_db(self):
        #if exist return True, else False
        db = TinyDB(self.db_name)#, storage=serialization)
        query = Query()
        if db.search(query.name == self.name):
            db.close()
            return True
        else:
            db.close()
            return False

    def update_papers(self):
        db = TinyDB(self.db_name)
        query = Query()
        db.update({'n_papers':self.n_papers},
                  query.name == self.name)
        db.close()

    def update_db(self):
        db = TinyDB(self.db_name)
        query = Query()
        data = db.get(query.name == self.name)

        autor = self.merge_autors(Autor(data))


#        emails = data['emails']
#        countries = data['countries']
#        ids = data['identifier']
#        # print('obtenidos datos de BD')
#        self.email.extend(emails)
#        self.country.extend(countries)
#        self.id.extend(ids)
#        self.email = list(set(self.email))
#        self.country = list(set(self.country))
#        self.id = list(set(self.id))
        db.update(autor.to_dict() ,
                        query.name == self.name)
        db.close()

    def merge_autors(self, autor):
        #merge all variables from 2 autors.
        autor_dict = self.to_dict()
        tmp_dict = autor.to_dict()

        autor_dict['emails'].extend(tmp_dict['emails'])
        autor_dict['countries'].extend(tmp_dict['countries'])
        autor_dict['identifier'].extend(tmp_dict['identifier'])

        autor_dict['n_papers'] = max([autor_dict['n_papers'], tmp_dict['n_papers']])

        autor_dict['affiliations'] = ';'.join([autor_dict['affiliations'], tmp_dict['affiliations']])
        autor_dict['state'] = ';'.join([autor_dict['state'], tmp_dict['state']])

        autor_dict['affiliations'] = ';'.join(list(set(autor_dict['affiliations'].split(';'))))
        autor_dict['emails'] = list(set(autor_dict['emails']))
        autor_dict['countries'] = list(set(autor_dict['countries']))
        autor_dict['identifier'] = list(set(autor_dict['identifier']))

        return Autor(autor_dict)

    def to_dict(self):

        parser = {'Fname': self.Fname, 'Lname': self.Lname, 'emails': list(set(self.email)), 'affiliations': self.affiliations,
                        'countries': list(set(self.country)), 'identifier':list(set(self.id)), 'name':self.name,
                  'updated':self.updated, 'n_papers':self.n_papers, 'state':self.state}
        return parser


